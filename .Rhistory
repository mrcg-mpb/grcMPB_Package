)
# create drug columns and filter for one of th drugs, in this case chloroquine
grc_data2 <-
gene_classifier(
df = grc_data1,
drug_column = "Chloroquine",
save_output = TRUE
)
# load the necessary libraries
library(sf)
library(readxl)
# import your geographical data for mapping
# shapefile
gmb_shpfile <- st_read(system.file("extdata", "geoBoundaries-GMB-ADM3_simplified.shp", package = "grcMPB"))
# excel sheet containing the location and their coordinates, longitude and latitude.
longitude_latitude <- read_excel(system.file("extdata", "LongLat_data.xlsx", package = "grcMPB"))
geo_data <-
mapping_data(
shapefile = gmb_shpfile,
long_lat_data = longitude_latitude,
location_col = "Location",
long_col = "long",
lat_col = "lat"
)
## You can create a single or range of years to filter buy before generating the plots
periods <-
list(
list(name = "2021", type = "year", start = "2021"),
list(name = "2017-19", type = "period", start = "2017", end = "2019")
)
library(grcMPB)
## You can create a single or range of years to filter by before generating the plots.
periods <-
list(
list(name = "2021", type = "year", start = "2021"),
list(name = "2017-19", type = "period", start = "2017", end = "2019")
)
sample_count_map(
df = grc_data,
map_data = geo_data,
time = NULL,
circle_num_size = 3.1,
label_size = 2.5,
label_repel = 1.3,
scale_circle_size = 11,
save_output = FALSE
)
drug_distribution(
df = grc_data1,
drug_col = "Chloroquine",
save_output = FALSE,
time = NULL
)
drug_distribution_pm(
df = grc_data1,
drug_col = "Chloroquine",
save_output = FALSE,
time = NULL,
map_data = geo_data,
label_size = 2.5,
label_repel = 1.3,
circle_num_size = 3.1,
scale_circle_size = 10
)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
drug_distribution(
df = grc_data1,
drug_col = "Chloroquine",
save_output = FALSE,
time = NULL
)
drug_distribution_pm(
df = grc_data1,
drug_col = "Chloroquine",
save_output = FALSE,
time = NULL,
map_data = geo_data,
label_size = 2.5,
label_repel = 1.3,
circle_num_size = 3.1,
scale_circle_size = 10
)
drug_distribution_pm(
df = grc_data2,
drug_col = "Chloroquine",
save_output = FALSE,
time = NULL,
map_data = geo_data,
label_size = 2.5,
label_repel = 1.3,
circle_num_size = 3.1,
scale_circle_size = 10
)
drug_distribution(
df = grc_data2,
drug_col = "Chloroquine",
save_output = FALSE,
time = NULL
)
devtools::load_all(".")
library(grcMPB)
haplotype_proportion(
df = grc_data,
gene_col = "PfCRT",
save_output = FALSE,
time = NULL,
map_data = geo_data,
label_size = 2.5,
label_repel = 1.5,
sacle_piechart_size = 0.035
)
haplotype_proportion(
df = grc_data1,
gene_col = "PfCRT",
save_output = FALSE,
time = NULL,
map_data = geo_data,
label_size = 2.5,
label_repel = 1.5,
sacle_piechart_size = 0.035
)
haplotype_proportion(
df = grc_data2,
gene_col = "PfCRT",
save_output = FALSE,
time = NULL,
map_data = geo_data,
label_size = 2.5,
label_repel = 1.5,
sacle_piechart_size = 0.035
)
devtools::load_all(".")
library(scatterpie)
?geom_scatterpie2
library(ggplot2)
library(dplyr)
# Create dummy data
set.seed(123)
donut_data <- data.frame(
location = paste0("Site_", 1:5),
long = runif(5, min = -100, max = -80),
lat = runif(5, min = 25, max = 45),
Sample_1 = runif(5, 10, 50),
Sample_2 = runif(5, 10, 50),
Sample_3 = runif(5, 10, 50)
)
# Prepare data for plotting
donut_plot_data <- donut_data %>%
tidyr::pivot_longer(
cols = c(Sample_1, Sample_2, Sample_3),
names_to = "Sample",
values_to = "Value"
)
# Create plot
ggplot() +
# Donut charts with locations
geom_scatterpie(
data = donut_data,
aes(x = long, y = lat, r = 0.5),
cols = c("Sample_1", "Sample_2", "Sample_3"),
color = NA,
alpha = 0.7
) +
# Add sample text in the middle of each pie
geom_text(
data = donut_data,
aes(x = long, y = lat, label = location),
color = "white",
fontface = "bold",
size = 3
) +
# Styling
theme_minimal() +
scale_fill_brewer(palette = "Set3") +
# Labels
labs(
title = "Sample Distribution by Location",
x = "Longitude",
y = "Latitude",
fill = "Samples"
) +
# Adjust theme
theme(
panel.grid.major = element_line(color = "gray90", linetype = "dashed"),
panel.grid.minor = element_blank()
)
# Load required libraries
library(ggplot2)
library(dplyr)
# Generate dummy data for different scenarios
set.seed(123)
# Sales data by product category
sales_data <- data.frame(
Category = c("Electronics", "Clothing", "Books", "Home Goods", "Toys"),
Sales = c(4500, 3200, 2100, 1800, 1400)
)
# Customer demographics
demographics_data <- data.frame(
AgeGroup = c("18-24", "25-34", "35-44", "45-54", "55+"),
Percentage = c(25, 35, 20, 12, 8)
)
# Create donut plot for sales data
sales_plot <- ggplot(sales_data, aes(x = "", y = Sales, fill = Category)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_void() +
theme(legend.position = "right") +
ggtitle("Sales by Product Category") +
geom_text(aes(label = paste0(Category, "\n$", Sales)),
position = position_stack(vjust = 0.5)) +
theme(plot.title = element_text(hjust = 0.5)) +
guides(fill = guide_legend(title = "Categories"))
# Create donut plot for demographics
demographics_plot <- ggplot(demographics_data, aes(x = "", y = Percentage, fill = AgeGroup)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_void() +
theme(legend.position = "right") +
ggtitle("Customer Age Distribution") +
geom_text(aes(label = paste0(AgeGroup, "\n", Percentage, "%")),
position = position_stack(vjust = 0.5)) +
theme(plot.title = element_text(hjust = 0.5)) +
guides(fill = guide_legend(title = "Age Groups"))
# Print plots
print(sales_plot)
print(demographics_plot)
# Create test data.
data <- data.frame(
category=c("A", "B", "C"),
count=c(10, 60, 30)
)
# Compute percentages
data$fraction = data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax = cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin = c(0, head(data$ymax, n=-1))
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
coord_polar(theta="y") + # Try to remove that to understand how the chart is built initially
xlim(c(2, 4)) # Try to remove that to see how to make a pie chart
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Compute label position
data$labelPosition <- (data$ymax + data$ymin) / 2
# Create test data.
data <- data.frame(
category=c("A", "B", "C"),
count=c(10, 60, 30)
)
# Compute percentages
data$fraction <- data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Compute label position
data$labelPosition <- (data$ymax + data$ymin) / 2
# Compute a good label
data$label <- paste0(data$category, "\n value: ", data$count)
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=2, aes(y=labelPosition, label=label, color=category), size=6) + # x here controls label position (inner / outer)
scale_fill_brewer(palette=3) +
scale_color_brewer(palette=3) +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
theme(legend.position = "none")
# Create test data.
data <- data.frame(
category=c("A", "B", "C"),
count=c(10, 60, 30)
)
# Compute percentages
data$fraction <- data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Compute label position
data$labelPosition <- (data$ymax + data$ymin) / 2
# Compute a good label
data$label <- paste0(data$category, "\n value: ", data$count)
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
scale_fill_brewer(palette=4) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=3) +
scale_fill_brewer(palette=4) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
#geom_label( x=3.5, aes(y=labelPosition, label=label), size=3) +
scale_fill_brewer(palette=4) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
#geom_label( x=3.5, aes(y=labelPosition, label=label), size=3) +
scale_fill_brewer(palette=4) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void()
# Create test data with sample count
data <- data.frame(
category = c("A", "B", "C"),
count = c(10, 60, 30),
sample_count = c(500, 3000, 1500)
)
# Compute percentages
data$fraction <- data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Compute label position
data$labelPosition <- (data$ymax + data$ymin) / 2
# Compute labels
data$label <- paste0(data$category, "\n",
round(data$fraction * 100, 1), "%\n",
"n = ", data$sample_count)
# Make the plot
ggplot(data, aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = category)) +
geom_rect() +
geom_label(x = 3.5,
aes(y = labelPosition, label = label),
size = 3,
show.legend = FALSE) +
scale_fill_brewer(palette = 4) +
coord_polar(theta = "y") +
xlim(c(2, 4)) +
theme_void() +
labs(title = "Category Distribution with Sample Counts") +
theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
library(dplyr)
library(patchwork)
# Create data for 5 locations with 5 food types
set.seed(123)
locations <- c("New York", "Los Angeles", "Chicago", "Houston", "Miami")
food_types <- c("Pizza", "Burger", "Sushi", "Tacos", "Salad")
# Function to generate data for each location
generate_location_data <- function(location) {
# Randomize percentages while ensuring they sum to 100
counts <- sample(30:70, 5)
counts <- counts / sum(counts) * 100
data.frame(
location = location,
category = food_types,
count = counts,
sample_count = sample(1000:5000, 5)
)
}
# Generate data for all locations
all_data <- do.call(rbind, lapply(locations, generate_location_data))
# Function to create donut plot for a single location
create_donut_plot <- function(location_data) {
# Compute cumulative percentages
location_data$ymax <- cumsum(location_data$count / 100)
location_data$ymin <- c(0, head(location_data$ymax, n=-1))
location_data$labelPosition <- (location_data$ymax + location_data$ymin) / 2
# Total sample count for this location
total_samples <- sum(location_data$sample_count)
# Create plot
ggplot(location_data, aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = category)) +
geom_rect() +
geom_label(x = 3.5,
aes(y = labelPosition,
label = paste0(category, "\n",
round(count, 1), "%")),
size = 3,
show.legend = FALSE) +
annotate("text", x = 3.5, y = 0, label = paste0("N = ", total_samples),
fontface = "bold", size = 4) +
scale_fill_brewer(palette = 4) +
coord_polar(theta = "y") +
xlim(c(2, 4)) +
theme_void() +
labs(title = location_data$location[1]) +
theme(plot.title = element_text(hjust = 0.5))
}
# Create plots for each location
plots <- lapply(split(all_data, all_data$location), create_donut_plot)
# Combine plots
combined_plot <- wrap_plots(plots, ncol = 3)
# Print combined plot
print(combined_plot)
# Summary of total samples per location
location_summary
# Create data for 5 locations with 5 food types
set.seed(123)
locations <- c("New York", "Los Angeles", "Chicago", "Houston", "Miami")
food_types <- c("Pizza", "Burger", "Sushi", "Tacos", "Salad")
# Function to generate data for each location
generate_location_data <- function(location) {
# Randomize percentages while ensuring they sum to 100
counts <- sample(30:70, 5)
counts <- counts / sum(counts) * 100
data.frame(
location = location,
category = food_types,
count = counts,
sample_count = sample(1000:5000, 5)
)
}
# Generate data for all locations
all_data <- do.call(rbind, lapply(locations, generate_location_data))
# Function to create donut plot for a single location
create_donut_plot <- function(location_data) {
# Compute cumulative percentages
location_data$ymax <- cumsum(location_data$count / 100)
location_data$ymin <- c(0, head(location_data$ymax, n=-1))
location_data$labelPosition <- (location_data$ymax + location_data$ymin) / 2
# Total sample count for this location
total_samples <- sum(location_data$sample_count)
# Create plot
ggplot(location_data, aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = category)) +
geom_rect() +
geom_label(x = 3.5,
aes(y = labelPosition,
label = paste0(category, "\n",
round(count, 1), "%")),
size = 3,
show.legend = FALSE) +
annotate("text", x = 3.5, y = 0, label = paste0("N = ", total_samples),
fontface = "bold", size = 5, color = "darkred") +
scale_fill_brewer(palette = 4) +
coord_polar(theta = "y") +
xlim(c(2, 4)) +
theme_void() +
labs(title = location_data$location[1]) +
theme(plot.title = element_text(hjust = 0.5))
}
# Create plots for each location
plots <- lapply(split(all_data, all_data$location), create_donut_plot)
# Combine plots
combined_plot <- wrap_plots(plots, ncol = 3)
# Print combined plot
print(combined_plot)
# Summary of total samples per location
location_summary <- all_data %>%
group_by(location) %>%
summarise(total_samples = sum(sample_count))
print(location_summary)
library(grcMPB)
grc_data <-
combine_grc_sheets(
input_folder = system.file("extdata", "example_GRC_sheets", package = "grcMPB"),
country = "Gambia",
save_output = FALSE,
output_dir = "C:/Users/bngwa/Videos"
)
# create drug columns without filtering for any drug
grc_data1 <-
gene_classifier(
df = grc_data,
drug_column = NULL,
save_output = FALSE
)
# create drug columns and filter for one of the drugs, in this case chloroquine
grc_data2 <-
gene_classifier(
df = grc_data1,
drug_column = "Chloroquine",
save_output = FALSE
)
# load the necessary libraries
library(sf)
library(readxl)
# import your geographical data for mapping
# shapefile
gmb_shpfile <- st_read(system.file("extdata", "geoBoundaries-GMB-ADM3_simplified.shp", package = "grcMPB"))
# excel sheet containing the location and their coordinates, longitude and latitude.
longitude_latitude <- read_excel(system.file("extdata", "LongLat_data.xlsx", package = "grcMPB"))
geo_data <-
mapping_data(
shapefile = gmb_shpfile,
long_lat_data = longitude_latitude,
location_col = "Location",
long_col = "long",
lat_col = "lat"
)
haplotype_proportion(
df = grc_data1,
gene_col = "PfCRT",
save_output = FALSE,
time = NULL,
map_data = geo_data,
label_size = 2.5,
label_repel = 1.5,
sacle_piechart_size = 0.035
)
