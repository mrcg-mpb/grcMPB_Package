IBS_Threshold = 0.75)
# Assuming MeltIbsData and LongLat_data are available:
IBS_DataSummary(MeltIbsData = IBS_Data$IbsMeltedMatrix %>% filter(LS1 != LS2),
LongLat_data = LongLat,
IBS_Threshold = 0.75)
# Assuming MeltIbsData and LongLat_data are available:
IBS_SummarisedData1 <-
IBS_DataSummary(MeltIbsData = IBS_Data$IbsMeltedMatrix %>% filter(LS1 != LS2),
LongLat_data = LongLat,
IBS_Threshold = 0.75)
devtools::load_all(".")
# Assuming MeltIbsData and LongLat_data are available:
IBS_SummarisedData1 <-
IBS_DataSummary(MeltIbsData = IBS_Data$IbsMeltedMatrix %>% filter(LS1 != LS2),
LongLat_data = LongLat,
IBS_Threshold = 0.75)
# Assuming MeltIbsData and LongLat_data are available:
IBS_SummarisedData1 <-
IBS_DataSummary(MeltIbsData = IBS_Data$IbsMeltedMatrix %>% filter(LS1 == LS2),
LongLat_data = LongLat,
IBS_Threshold = 0.75)
View(IBS_SummarisedData1)
IBS_SummarisedData1 <- IBS_SummarisedData1 %>% select(LS1,median_IBS,,Lat1,Long1) %>% mutate(median_IBS = round(median_IBS * 100, 1))
IBS_SummarisedData1 <- IBS_SummarisedData1 %>% left_join(DiversityData %>% select(Location, Total), by = c("LS1" = "Location"))
# create sf object
IBS_SummarisedData1_Sf <- st_as_sf(IBS_SummarisedData1, coords = c("Long1", "Lat1"), crs = st_crs(GMB))
devtools::load_all(".")
# Assuming MeltIbsData and LongLat_data are available:
IBS_SummarisedData1 <-
IBS_DataSummary(MeltIbsData = IBS_Data$IbsMeltedMatrix %>% filter(LS1 == LS2),
LongLat_data = LongLat,
IBS_Threshold = 0.75)
# select th columns you need
IBS_SummarisedData1 <- IBS_SummarisedData1 %>% select(LS1,median_IBS,,Lat1,Long1) %>% mutate(median_IBS = round(median_IBS * 100, 1))
# Get th sample count information from the DiversityDataframe
IBS_SummarisedData1 <- IBS_SummarisedData1 %>% left_join(DiversityData %>% select(Location, Total), by = c("LS1" = "Location"))
# create sf object
IBS_SummarisedData1_Sf <- st_as_sf(IBS_SummarisedData1, coords = c("Long1", "Lat1"), crs = st_crs(GMB))
View(IBS_SummarisedData1)
# use the proportion map fucntion to plot
Proportion_Map(shapeFile = GMB,
summaryData = IBS_SummarisedData1,
summaryData_sf = IBS_SummarisedData1_Sf,
prop_column = "median_IBS")
devtools::load_all(".")
# use the proportion map fucntion to plot
Proportion_Map(shapeFile = GMB,
summaryData = IBS_SummarisedData1,
summaryData_sf = IBS_SummarisedData1_Sf,
prop_column = "median_IBS",
long_col = "Long1",
lat_col = "Lat1" )
devtools::load_all(".")
devtools::load_all(".")
# use the proportion map fucntion to plot
Proportion_Map(shapeFile = GMB,
summaryData = IBS_SummarisedData1,
summaryData_sf = IBS_SummarisedData1_Sf,
prop_column = "median_IBS",
location_col = "LS1",
long_col = "Long1",
lat_col = "Lat1" )
# use the proportion map fucntion to plot
Proportion_Map(shapeFile = GMB,
summaryData = IBS_SummarisedData1,
summaryData_sf = IBS_SummarisedData1_Sf,
prop_column = "median_IBS",
location_col = "LS1",
long_col = "Long1",
lat_col = "Lat1",
savelocation_col = savePath)
# use the proportion map fucntion to plot
Proportion_Map(shapeFile = GMB,
summaryData = IBS_SummarisedData1,
summaryData_sf = IBS_SummarisedData1_Sf,
prop_column = "median_IBS",
location_col = "LS1",
long_col = "Long1",
lat_col = "Lat1",
savelocation_col = savePath)
# Assuming MeltIbsData and LongLat_data are available:
IBS_SummarisedData2 <-
IBS_DataSummary(MeltIbsData = IBS_Data$IbsMeltedMatrix %>% filter(LS1 != LS2),
LongLat_data = LongLat,
IBS_Threshold = 0.75)
View(IBS_SummarisedData2)
IBS_SummarisedData2$LS1 %>% unique()
IBS_SummarisedData2$LS2 %>% unique()
DiversityMap(df = FinalData,
SNP_Data = BarcodeData,
shapeFile = GMB,
LongLat_data = LongLat)
devtools::load_all(".")
devtools::load_all(".")
DiversityMap(df = FinalData,
SNP_Data = BarcodeData,
shapeFile = GMB,
LongLat_data = LongLat)
devtools::load_all(".")
DiversityMap(df = FinalData,
SNP_Data = BarcodeData,
shapeFile = GMB,
LongLat_data = LongLat)
# use the proportion map fucntion to plot
Proportion_Map(shapeFile = GMB,
summaryData = IBS_SummarisedData1,
summaryData_sf = IBS_SummarisedData1_Sf,
prop_column = "median_IBS",
location_col = "LS1",
long_col = "Long1",
lat_col = "Lat1",
savelocation_col = savePath)
# use the proportion map fucntion to plot
Proportion_Map(shapeFile = GMB,
summaryData = IBS_SummarisedData1,
summaryData_sf = IBS_SummarisedData1_Sf,
prop_column = "median_IBS",
location_col = "LS1",
long_col = "Long1",
lat_col = "Lat1",
saveLocation = savePath)
print(head(IBS_SummarisedData1))
print(head(IBS_SummarisedData1))
print(head(IBS_SummarisedData1))
# use the proportion map fucntion to plot
Proportion_Map(shapeFile = GMB,
summaryData = IBS_SummarisedData1,
summaryData_sf = IBS_SummarisedData1_Sf,
prop_column = "median_IBS",
location_col = "LS1",
long_col = "Long1",
lat_col = "Lat1",
saveLocation = savePath)
print(head(IBS_SummarisedData1))
# use the proportion map fucntion to plot
Proportion_Map(shapeFile = GMB,
summaryData = IBS_SummarisedData1,
summaryData_sf = IBS_SummarisedData1_Sf,
prop_column = "median_IBS",
location_col = "LS1",
long_col = "Long1",
lat_col = "Lat1",
saveLocation = savePath)
print(head(IBS_SummarisedData1))
# use the proportion map fucntion to plot
Proportion_Map(shapeFile = GMB,
summaryData = IBS_SummarisedData1,
summaryData_sf = IBS_SummarisedData1_Sf,
prop_column = "median_IBS",
location_col = "LS1",
long_col = "Long1",
lat_col = "Lat1",
saveLocation = savePath)
## create sf objects for your longitude and latitude data
LongLatSf <- st_as_sf(LongLat_data, coords = c("long", "lat"), crs = st_crs(GMB))
## create sf objects for your longitude and latitude data
LongLatSf <- st_as_sf(LongLat, coords = c("long", "lat"), crs = st_crs(GMB))
devtools::load_all(".")
IBS_ConnectednesMaps( shapeFile = GMB,
LongLatData_sf = LongLatSf,
IbsData = IBS_SummarisedData2 ,
LongLatData = LongLat_data,
prop_column = "Location_per",
plotName = "IBS Connection plot for All pairs >= 0.75",
breaks = seq(0,16,4),
limits = c(0,16),
saveName = "GroupConnectionLP",
savePath = IbsConMapsG_FilePath )
IBS_ConnectednesMaps( shapeFile = GMB,
LongLatData_sf = LongLatSf,
IbsData = IBS_SummarisedData2 ,
LongLatData = LongLat_data,
prop_column = "Location_per",
plotName = "IBS Connection plot for All pairs >= 0.75",
breaks = seq(0,16,4),
limits = c(0,16),
saveName = "GroupConnectionLP")
IBS_ConnectednesMaps( shapeFile = GMB,
LongLatData_sf = LongLatSf,
IbsData = IBS_SummarisedData2 ,
LongLatData = LongLat_data,
prop_column = "Location_per",
plotName = "IBS Connection plot for All pairs >= 0.75",
breaks = seq(0,16,4),
limits = c(0,16),
saveName = "GroupConnectionLP")
devtools::load_all(".")
IBS_ConnectednesMaps( shapeFile = GMB,
LongLatData_sf = LongLatSf,
IbsData = IBS_SummarisedData2 ,
LongLatData = LongLat_data,
prop_column = "Location_per",
plotName = "IBS Connection plot for All pairs >= 0.75",
breaks = seq(0,16,4),
limits = c(0,16),
saveName = "GroupConnectionLP")
View(IBS_SummarisedData2)
colnames(IBS_SummarisedData2)[grep("\\.per$", colnames(IBS_SummarisedData2))]
devtools::load_all(".")
# Assuming MeltIbsData and LongLat_data are available:
IBS_SummarisedData2 <-
IBS_DataSummary(MeltIbsData = IBS_Data$IbsMeltedMatrix %>% filter(LS1 != LS2),
LongLat_data = LongLat,
IBS_Threshold = 0.75)
print(head(IBS_SummarisedData2))
colnames(IBS_SummarisedData2)[grep("\\.per$", colnames(IBS_SummarisedData2))]
View(IBS_SummarisedData2)
IBS_ConnectednesMaps( shapeFile = GMB,
LongLatData_sf = LongLatSf,
IbsData = IBS_SummarisedData2 ,
LongLatData = LongLat,
prop_column = "TotalPairCount.per",
plotName = "IBS Connection plot for All pairs >= 0.75",
breaks = seq(0,16,4),
limits = c(0,16),
saveName = "GroupConnectionLP")
LongLatSf <- LongLatSf %>% filter(Location = unique(IBS_SummarisedData2$LS1))
LongLatSf <- LongLatSf %>% filter(Location == unique(IBS_SummarisedData2$LS1))
IBS_ConnectednesMaps( shapeFile = GMB,
LongLatData_sf = LongLatSf,
IbsData = IBS_SummarisedData2 ,
LongLatData = LongLat,
prop_column = "TotalPairCount.per",
plotName = "IBS Connection plot for All pairs >= 0.75",
breaks = seq(0,16,4),
limits = c(0,16),
saveName = "GroupConnectionLP")
IBS_ConnectednesMaps( shapeFile = GMB,
LongLatData_sf = LongLatSf,
IbsData = IBS_SummarisedData2 ,
LongLatData = LongLat,
prop_column = "TotalPairCount.per",
plotName = "IBS Connection plot for All pairs >= 0.75",
breaks = seq(0,16,4),
limits = c(0,16),
saveName = "GroupConnectionLP")
LongLatSf
## create sf objects for your longitude and latitude data
LongLatSf <- LongLat %>% filter(Location == unique(IBS_SummarisedData2$LS1))
LongLatSf
LongLat %>% filter(Location == unique(IBS_SummarisedData2$LS1))
LongLatSf %>% filter(Location %in% c(unique(IBS_SummarisedData2$LS1)))
unique(IBS_SummarisedData2$LS1)
LongLatSf %>% filter(Location %in% unique(IBS_SummarisedData2$LS1))
View(LongLat)
LongLat %>% filter(Location %in% unique(IBS_SummarisedData2$LS1))
## create sf objects for your longitude and latitude data
LongLat <- LongLat %>% filter(Location %in% unique(IBS_SummarisedData2$LS1))
LongLatSf <- st_as_sf(LongLat, coords = c("long", "lat"), crs = st_crs(GMB))
LongLatSf
IBS_ConnectednesMaps( shapeFile = GMB,
LongLatData_sf = LongLatSf,
IbsData = IBS_SummarisedData2 ,
LongLatData = LongLat,
prop_column = "TotalPairCount.per",
plotName = "IBS Connection plot for All pairs >= 0.75",
breaks = seq(0,16,4),
limits = c(0,16),
saveName = "GroupConnectionLP")
IBS_ConnectednesMaps( shapeFile = GMB,
LongLatData_sf = LongLatSf,
IbsData = IBS_SummarisedData2 ,
LongLatData = LongLat,
prop_column = "TotalPairCount.per",
plotName = "IBS Connection plot for All pairs >= 0.75",
breaks = seq(0,16,4),
limits = c(0,16),
saveName = "GroupConnectionLP")
devtools::load_all(".")
IBS_ConnectednesMaps( shapeFile = GMB,
LongLatData_sf = LongLatSf,
IbsData = IBS_SummarisedData2 ,
LongLatData = LongLat,
prop_column = "TotalPairCount.per",
plotName = "IBS Connection plot for All pairs >= 0.75",
breaks = seq(0,16,4),
limits = c(0,16),
saveName = "GroupConnectionLP")
devtools::load_all(".")
# Use the IBS_ConnectednessMap funcion to plot th summary data
IBS_ConnectednesMaps( shapeFile = GMB,
LongLatData_sf = LongLatSf,
IbsData = IBS_SummarisedData2 ,
LongLatData = LongLat,
prop_column = "TotalPairCount.per",
plotName = "IBS Connection plot for All pairs >= 0.75",
breaks = seq(0,16,4),
limits = c(0,16),
saveName = "GroupConnectionLP")
# For which ever perecentage column we want to plot let's filter th summary data for percentage 5 percent and above
IBS_SummarisedData2a <- IBS_SummarisedData2 %>% filter(TotalPairCount.per >= 5)
# For which ever perecentage column we want to plot let's filter th summary data for percentage 5 percent and above
IBS_SummarisedData2a <- IBS_SummarisedData2 %>% filter(TotalPairCount.per >= 1)
## create sf objects for your longitude and latitude data
LongLat <- LongLat %>% filter(Location %in% unique(IBS_SummarisedData2a$LS1))
LongLatSf <- st_as_sf(LongLat, coords = c("long", "lat"), crs = st_crs(GMB))
colnames(IBS_SummarisedData2a)[grep("\\.per$", colnames(IBS_SummarisedData2a))]
# Use the IBS_ConnectednessMap funcion to plot th summary data
IBS_ConnectednesMaps( shapeFile = GMB,
LongLatData_sf = LongLatSf,
IbsData = IBS_SummarisedData2a ,
LongLatData = LongLat,
prop_column = "TotalPairCount.per",
plotName = "IBS Connection plot for All pairs >= 0.75",
breaks = seq(0,16,4),
limits = c(0,16),
saveName = "GroupConnectionLP")
# Use the IBS_ConnectednessMap funcion to plot th summary data
IBS_ConnectednesMaps( shapeFile = GMB,
LongLatData_sf = LongLatSf,
IbsData = IBS_SummarisedData2a ,
LongLatData = LongLat,
prop_column = "TotalPairCount.per",
plotName = "IBS Connection plot for All pairs >= 0.75",
breaks = seq(0,8,2),
limits = c(0,8),
saveName = "GroupConnectionLP")
devtools::load_all(".")
# Use the IBS_ConnectednessMap funcion to plot th summary data
IBS_ConnectednesMaps( shapeFile = GMB,
LongLatData_sf = LongLatSf,
IbsData = IBS_SummarisedData2a ,
LongLatData = LongLat,
prop_column = "TotalPairCount.per",
plotName = "IBS Connection plot for All pairs >= 0.75",
breaks = seq(0,8,2),
limits = c(0,8),
saveName = "GroupConnectionLP")
devtools::load_all(".")
# Use the IBS_ConnectednessMap funcion to plot th summary data
IBS_ConnectednesMaps( shapeFile = GMB,
LongLatData_sf = LongLatSf,
IbsData = IBS_SummarisedData2a ,
LongLatData = LongLat,
prop_column = "TotalPairCount.per",
plotName = "IBS Connection plot for All pairs >= 0.75",
breaks = seq(0,8,2),
limits = c(0,8),
saveName = "GroupConnectionLP")
devtools::load_all(".")
# Use the IBS_ConnectednessMap funcion to plot th summary data
IBS_ConnectednesMaps( shapeFile = GMB,
LongLatData_sf = LongLatSf,
IbsData = IBS_SummarisedData2a ,
LongLatData = LongLat,
prop_column = "TotalPairCount.per",
plotName = "IBS Connection plot for All pairs >= 0.75",
breaks = seq(0,8,2),
limits = c(0,8),
saveName = "GroupConnectionLP")
Period <-
list( list(name="2021", type ="year", start="2021"), list(name="2017-19",  type= "period", start="2017",  end="2019") )
Period
Drug_Distribution <- function(df, LongLat_data, drug_col, time = NULL) {
# Create necessary directories if they don't exist
dir.create(paste0("Outputs/", drug_col), showWarnings = FALSE)
dir.create(paste0("Outputs/", drug_col, "/Proportion_Maps"), showWarnings = FALSE)
savePath <- paste0("Outputs/", drug_col, "/Proportion_Maps")
assign("savePath", savePath, envir = .GlobalEnv)
plot_list <- list()  # Initialize list to store plots
# Function to create plots
create_plots <- function(df_filtered, period_name) {
## Summarize the data by location and drug status
summaryTable <- data.frame(unclass(table(df_filtered$Location, df_filtered[[drug_col]])))
summaryTable <- summaryTable %>%
dplyr::mutate(Total = rowSums(.[, c("Mixed.Resistant", "Resistant", "Sensitive")]),
All_Resistant = rowSums(.[, c("Mixed.Resistant", "Resistant")])) %>%
dplyr::mutate(across(everything(), ~ round(./Total * 100, 1), .names = "{.col}.per")) %>%
dplyr::select(-Total.per)
summaryTable$Location <- rownames(summaryTable)
rownames(summaryTable) <- NULL
summaryTable <- dplyr::left_join(summaryTable, LongLat_data, by = "Location")
summaryTable_long <- summaryTable %>%
dplyr::select(Mixed.Resistant, Sensitive, Resistant, Location) %>%
tidyr::gather(key = Sample_Type, value = Count, -Location)
BarChartData <- df_filtered %>%
dplyr::group_by(Chloroquine) %>%
dplyr::summarise(Count = n()) %>%
dplyr::mutate(prob = round(Count / sum(Count) * 100, 2))
colors <- c("Resistant" = "#525CEB", "Mixed.Resistant" = "#808000", "Sensitive" = "#800000")
## Build the first plot
bar1 <- ggplot(summaryTable_long, aes(x = reorder(Location, +Count), y = Count, fill = Sample_Type)) +
geom_bar(stat = "identity") +
labs(x = "Location", y = "Count") +
theme_classic() +
theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1, face = "bold"),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 12)) +
guides(fill = guide_legend(title = "Status")) +
scale_fill_manual(values = colors) +
geom_text(aes(Location, Total + 6, label = Total, fill = NULL), data = summaryTable)
## Save the first plot
ggsave(path = savePath, filename = paste0("DrugStatus_BarChart1_", period_name, ".jpeg"), plot = bar1, dpi = 300, width = 11, height = 7)
## Build the second plot
bar2 <- ggplot(BarChartData, aes(x = reorder(Chloroquine, +prob), y = prob, fill = Chloroquine)) +
geom_bar(stat = "identity", width = 0.7) +
coord_flip() +
labs(title = paste0("Proportion of Chloroquine Drug Conditions (", period_name, ")"),
x = "Chloroquine Category",
y = "Percentage (%)") +
scale_fill_manual(values = colors) +
theme_classic() +
theme(legend.position = "none",
axis.text.y = element_text(size = 12, face = "bold"),
axis.text.x = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12, face = "bold")) +
geom_text(aes(label = paste0(prob, "%")), hjust = -0.1, fontface = "bold")
## Save the second plot
ggsave(path = savePath, filename = paste0("DrugStatus_BarChart2_", period_name, ".jpeg"), plot = bar2, dpi = 300, width = 15, height = 7)
return(list(bar1 = bar1, bar2 = bar2))
}
# If time is not NULL, filter the dataset for the specified periods or years
if (!is.null(time)) {
for (period in time) {
if (period$type == "year") {
df_filtered <- df %>% dplyr::filter(Year == period$start)
period_name <- period$name
plot_list[[period_name]] <- create_plots(df_filtered, period_name)
} else if (period$type == "period") {
df_filtered <- df %>% dplyr::filter(Year >= period$start & Year <= period$end)
period_name <- period$name
plot_list[[period_name]] <- create_plots(df_filtered, period_name)
}
}
# Display all plots side by side using gridExtra
library(gridExtra)
grid.arrange(grobs = lapply(plot_list, `[[`, "bar1"), ncol = 2)
} else {
# If time is NULL, proceed with the original dataset
plot_list[["Original"]] <- create_plots(df, "Original")
}
return(plot_list)
}
devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE)
FinalData <-
Combine_GRC_Sheets(input_folder="C:/Users/bngwa/Documents/Brandon/GDA_Markdown/All_GRC_Reads_Gambia",
Country = "Gambia")
FinalData <-
Gene_Classifier(df = FinalData,
drug_column = "Chloroquine")
## Read the logitude and latitude data
LongLat <- read_excel("C:/Users/bngwa/Documents/Brandon/GDA_Markdown/LongLat_data.xlsx")
Drug_Distribution(df = FinalData,
LongLat_data = LongLat,
drug_col = "Chloroquine",
time = Period)
Drug_Distribution(df = FinalData,
LongLat_data = LongLat,
drug_col = "Chloroquine")
OutputDir = getwd()
dir.create(file.path(OutputDir, "Outputs"), showWarnings = FALSE)
savePath = file.path(OutputDir, "Outputs")
file.path(savePath, "GRC_Sheet.xlsx")
paste0(savePath, drug_col, "/Proportion_Maps")
paste0(savePath, "drug_col", "/Proportion_Maps")
file.path(OutputDir, "Outputs")
file.path(savePath, "drug_col")
file.path(savePath, "drug_col","ps")
file.path(savePath, "drug_col","Proportion_Maps")
list(mainPath = file.path(OutputDir, "Outputs"))
devtools::load_all(".")
list(mainPath = file.path(getwd(), "Outputs"))
devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE)
FinalData <-
Combine_GRC_Sheets(input_folder="C:/Users/bngwa/Documents/Brandon/GDA_Markdown/All_GRC_Reads_Gambia",
Country = "Gambia", saveOuput = TRUE)
View(OutputPaths)
devtools::load_all(".")
FinalData <-
Combine_GRC_Sheets(input_folder="C:/Users/bngwa/Documents/Brandon/GDA_Markdown/All_GRC_Reads_Gambia",
Country = "Gambia", saveOuput = TRUE)
FinalData <-
Gene_Classifier(df = FinalData,
drug_column = "Chloroquine")
## Read the logitude and latitude data
LongLat <- read_excel("C:/Users/bngwa/Documents/Brandon/GDA_Markdown/LongLat_data.xlsx")
Drug_Distribution(df = FinalData,
LongLat_data = LongLat,
drug_col = "Chloroquine",
saveOuput = TRUE)
View(SummaryData_Original)
file.path(OutputPaths$mainPath, drug_col, "Proportion_Maps")
devtools::load_all(".")
Drug_Distribution(df = FinalData,
LongLat_data = LongLat,
drug_col = "Chloroquine",
saveOuput = TRUE)
View(OutputPaths)
Drug_Distribution(df = FinalData,
LongLat_data = LongLat,
drug_col = "Chloroquine",
saveOuput = TRUE)
Drug_Distribution(df = FinalData,
LongLat_data = LongLat,
drug_col = "Chloroquine",
saveOuput = TRUE)
Drug_Distribution(df = FinalData,
LongLat_data = LongLat,
drug_col = "Chloroquine",
saveOuput = TRUE)
devtools::load_all(".")
Drug_Distribution(df = FinalData,
LongLat_data = LongLat,
drug_col = "Chloroquine",
saveOuput = TRUE)
Drug_Distribution(df = FinalData,
LongLat_data = LongLat,
drug_col = "Chloroquine",
saveOuput = TRUE)
shiny::runApp('Shiny_Dashboard/GRCMPB_Dashboard')
