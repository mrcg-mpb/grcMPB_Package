dplyr::rename(Year = `Date of Collection`) %>%
dplyr::mutate(Year = substr(Year, 1, 4)) %>%
dplyr::ungroup()
combined_dt <- combined_dt %>%
dplyr::filter(Country == "Gambia")
library(grcMPB)
combined_dt2 <-
combine_grc_sheets(
input_folder = "C:/Users/bngwa/Documents/Brandon/GDA_Markdown/All_GRC_Reads_Gambia",
country = "Gambia",
save_output = TRUE,
output_dir = "C:/Users/bngwa/Videos"
)
combined_dt2 <-
combine_grc_sheets(
input_folder = "C:/Users/bngwa/Documents/Brandon/GDA_Markdown/All_GRC_Reads_Gambia1",
country = "Gambia",
save_output = TRUE,
output_dir = "C:/Users/bngwa/Videos"
)
combined_dt <- combined_dt %>%
dplyr::filter(!Location %in% c("Ijede", "Asabanka", "Nkakat Eyamba", "Ngayen Sanjal"))
combine_grc_sheets2 <- function(input_folder, country = NULL, save_output = TRUE, output_dir = NULL) {
checkmate::assert_directory_exists(input_folder, access = "r")
if (!is.null(output_dir)) checkmate::assert_directory(output_dir)
files <- list.files(input_folder, pattern = "\\.xlsx$", full.names = TRUE)
if (length(files) == 0) stop("No .xlsx files found in the input folder.")
# Helper: Read Excel sheet with error handling
read_sheet_dt <- function(sheet_name) {
rbindlist(
lapply(files, function(file) {
tryCatch(
as.data.table(readxl::read_excel(file, sheet = sheet_name)),
error = function(e) {
message(paste(sheet_name, "sheet not found in file:", file))
NULL
}
)
}),
fill = TRUE
)
}
# Helper: Merge and coalesce duplicates
merge_and_clean_dt <- function(dt1, dt2, by_cols) {
result <- merge(dt1, dt2, by = by_cols, all = TRUE, allow.cartesian = TRUE)
# Coalesce duplicate columns
dup_cols <- grep("\\.(x|y)(\\.[0-9]+)?$", names(result), value = TRUE)
if (length(dup_cols) > 0) {
base_names <- unique(gsub("\\.(x|y)(\\.[0-9]+)?$", "", dup_cols))
for (base in base_names) {
related_cols <- grep(paste0("^", base, "(\\.(x|y)(\\.[0-9]+)?)?$"), names(result), value = TRUE)
result[, (base) := do.call(fcoalesce, .SD), .SDcols = related_cols]
result[, (setdiff(related_cols, base)) := NULL]
}
}
return(result)
}
# Read sheets
grc     <- read_sheet_dt("GRC")
grc2    <- read_sheet_dt("GRC2")
barcodes <- read_sheet_dt("Barcodes")
ena     <- read_sheet_dt("ENA")
# Merge
combined <- merge_and_clean_dt(ena, grc, by = "Sample Internal ID")
combined <- merge_and_clean_dt(combined, grc2, by = "Sample Internal ID")
combined <- merge_and_clean_dt(combined, barcodes, by = "Sample Internal ID")
# Clean and filter
combined <- combined[Species == "Pf"]
combined <- combined[!duplicated(`Sample Internal ID`)]
if ("Date of Collection" %in% names(combined)) {
combined[, Year := substr(`Date of Collection`, 1, 4)]
} else {
combined[, Year := NA_character_]
}
# Remove Pv columns
pv_cols <- grep("^Pv", names(combined), value = TRUE)
if (length(pv_cols)) combined[, (pv_cols) := NULL]
# Filter by country if provided
valid_countries <- unique(combined$Country)
if (!is.null(country)) {
checkmate::assert_choice(country, valid_countries)
combined <- combined[Country == country]
if (country == "Gambia" && "Location" %in% names(combined)) {
combined[, Location := fcase(
Location == "Sotuma", "Sotuma Sere",
Location == "EFSTH_Ndemban", "Banjul",
Location == "Gambisara", "Gambissara",
Location == "Yorobawol", "Yerobawol",
default = Location
)]
combined <- combined[!Location %in% c("Ijede", "Asabanka", "Nkakat Eyamba", "Ngayen Sanjal")]
}
}
# Save
if (save_output) {
if (.Platform$OS.type == "windows") {
otpt_dir <- normalizePath(tempdir(), winslash = "/")
} else {
otpt_dir <- tempdir()
}
save_path <- file.path(if (is.null(output_dir)) otpt_dir else output_dir, "Outputs")
dir.create(save_path, showWarnings = FALSE, recursive = TRUE)
assign("Output_Dir", save_path, envir = .GlobalEnv)
# You can switch to fwrite() if CSV is acceptable
# data.table::fwrite(combined, file.path(save_path, "GRC_Sheet.csv"))
writexl::write_xlsx(as.data.frame(combined), file.path(save_path, "GRC_Sheet.xlsx"))
}
return(combined)
}
combined_dt3 <-
combine_grc_sheets2(
input_folder = "C:/Users/bngwa/Documents/Brandon/GDA_Markdown/All_GRC_Reads_Gambia1",
country = "Gambia",
save_output = TRUE,
output_dir = "C:/Users/bngwa/Videos"
)
View(combined_dt3)
colnames(combined_dt2)
colnames(combined_dt3)
# Extract column names from both datasets
colnames_dt3 <- colnames(combined_dt3)
colnames_dt2 <- colnames(combined_dt2)
# Identify column names in combined_dt3 that are not in combined_dt2
not_in_dt2 <- setdiff(colnames_dt3, colnames_dt2)
# Identify column names in combined_dt2 that are not in combined_dt3
not_in_dt3 <- setdiff(colnames_dt2, colnames_dt3)
not_in_dt2
not_in_dt3
combined_dt3 <-
combine_grc_sheets2(
input_folder = "C:/Users/bngwa/Documents/Brandon/GDA_Markdown/All_GRC_Reads_Gambia1",
country = "Gambia",
save_output = TRUE,
output_dir = "C:/Users/bngwa/Videos"
)
combined_dt3 <-
combine_grc_sheets2(
input_folder = "C:/Users/bngwa/Documents/Brandon/GDA_Markdown/All_GRC_Reads_Gambia1",
country = "Gambia",
save_output = TRUE,
output_dir = "C:/Users/bngwa/Videos"
)
combined_dt2 <-
combine_grc_sheets(
input_folder = "C:/Users/bngwa/Documents/Brandon/GDA_Markdown/All_GRC_Reads_Gambia1",
country = "Gambia",
save_output = TRUE,
output_dir = "C:/Users/bngwa/Videos"
)
combined_dt3 <-
combine_grc_sheets2(
input_folder = "C:/Users/bngwa/Documents/Brandon/GDA_Markdown/All_GRC_Reads_Gambia1",
country = "Gambia",
save_output = FALSE,
output_dir = "C:/Users/bngwa/Videos"
)
combined_dt2 <-
combine_grc_sheets(
input_folder = "C:/Users/bngwa/Documents/Brandon/GDA_Markdown/All_GRC_Reads_Gambia1",
country = "Gambia",
save_output = FALSE,
output_dir = "C:/Users/bngwa/Videos"
)
combined_dt3 <-
combine_grc_sheets2(
input_folder = "C:/Users/bngwa/Documents/Brandon/GDA_Markdown/All_GRC_Reads_Gambia1",
country = "Gambia",
save_output = FALSE,
output_dir = "C:/Users/bngwa/Videos"
)
combined_dt2 <-
combine_grc_sheets(
input_folder = "C:/Users/bngwa/Documents/Brandon/GDA_Markdown/All_GRC_Reads_Gambia1",
country = "Gambia",
save_output = FALSE,
output_dir = "C:/Users/bngwa/Videos"
)
# Function to join all sheets in a single Excel file by "Sample Internal ID"
merge_excel_file_by_id <- function(file_path) {
message("Processing file: ", basename(file_path))
sheets <- readxl::excel_sheets(file_path)
# Read each sheet into a named list
sheet_list <- lapply(sheets, function(sheet_name) {
tryCatch({
dt <- as.data.table(readxl::read_excel(file_path, sheet = sheet_name))
setnames(dt, trimws(names(dt)))  # trim spaces in column names
return(dt)
}, error = function(e) {
message("Failed to read sheet: ", sheet_name, " in file: ", basename(file_path))
return(NULL)
})
})
names(sheet_list) <- sheets
# Filter out NULLs
sheet_list <- Filter(Negate(is.null), sheet_list)
# Check if there is any valid sheet to merge
if (length(sheet_list) == 0) {
message("No valid sheets to merge in file: ", basename(file_path))
return(NULL)
}
# Merge all sheets by "Sample Internal ID"
merged <- Reduce(function(x, y) {
merge(x, y, by = "Sample Internal ID", all = TRUE)
}, sheet_list)
# Make sure result is a data.table
merged <- as.data.table(merged)
# Add file source
merged[, File_Source := basename(file_path)]
return(merged)
}
# List all Excel files in the folder
files <- list.files("C:/Users/bngwa/Documents/Brandon/GDA_Markdown/All_GRC_Reads_Gambia", pattern = "\\.xlsx$", full.names = TRUE)
# Process all Excel files and row-bind them
all_data <- rbindlist(lapply(files, merge_excel_file_by_id), fill = TRUE)
library(grcMPB)
knitr::opts_chunk$set(
collapse = FALSE,
comment = "#>"
)
grc_data2 <-
combine_grc_sheets(
input_folder = "C:/Users/bngwa/Documents/Brandon/GDA_Markdown/All_GRC_Reads_Gambia",
country = "Gambia",
save_output = TRUE,
output_dir = "C:/Users/bngwa/Videos"
)
# load the necessary libraries
library(sf)
library(readxl)
# import your geographical data for mapping
gmb_shpfile <- st_read(system.file("extdata", "geoBoundaries-GMB-ADM3_simplified.shp", package = "grcMPB"))
# excel sheet containing the location and their coordinates, longitude and latitude.
longitude_latitude <- read_excel(system.file("extdata", "LongLat_data.xlsx", package = "grcMPB"))
geo_data <-
mapping_data(
shapefile = gmb_shpfile,
long_lat_data = longitude_latitude,
location_col = "Location",
long_col = "long",
lat_col = "lat"
)
coi_proportions(
df = grc_data2,
coi_column = "McCOIL",
time = NULL,
map_data = geo_data,
label_size = 2.5,
label_repel = 1.2,
donut_chart_size = 0.7,
save_output = TRUE,
plot_width = 11,
plot_height = 6,
plot_dpi = 600
)
devtools::load_all(".")
# load the necessary libraries
library(sf)
library(readxl)
# import your geographical data for mapping
gmb_shpfile <- st_read(system.file("extdata", "geoBoundaries-GMB-ADM3_simplified.shp", package = "grcMPB"))
# excel sheet containing the location and their coordinates, longitude and latitude.
longitude_latitude <- read_excel(system.file("extdata", "LongLat_data.xlsx", package = "grcMPB"))
geo_data <-
mapping_data(
shapefile = gmb_shpfile,
long_lat_data = longitude_latitude,
location_col = "Location",
long_col = "long",
lat_col = "lat"
)
# load the necessary libraries
library(sf)
library(readxl)
# import your geographical data for mapping
gmb_shpfile <- st_read(system.file("extdata", "geoBoundaries-GMB-ADM3_simplified.shp", package = "grcMPB"))
# excel sheet containing the location and their coordinates, longitude and latitude.
longitude_latitude <- read_excel(system.file("extdata", "LongLat_data.xlsx", package = "grcMPB"))
geo_data <-
mapping_data(
shapefile = gmb_shpfile,
long_lat_data = longitude_latitude,
location_col = "Location",
long_col = "long",
lat_col = "lat"
)
## You can create a single or range of years to filter by before generating the plots.
periods <-
list(
list(name = "2021", type = "year", start = "2021"),
list(name = "2017-19", type = "period", start = "2017", end = "2019")
)
sample_count_map(
df = grc_data,
map_data = geo_data,
time = NULL,
circle_num_size = 3.1,
label_size = 2.5,
label_repel = 1.3,
scale_circle_size = 11,
save_output = FALSE,
plot_width = 11,
plot_height = 6,
plot_dpi = 600
)
devtools::load_all(".")
## You can create a single or range of years to filter by before generating the plots.
periods <-
list(
list(name = "2021", type = "year", start = "2021"),
list(name = "2017-19", type = "period", start = "2017", end = "2019")
)
sample_count_map(
df = grc_data,
map_data = geo_data,
time = NULL,
circle_num_size = 3.1,
label_size = 2.5,
label_repel = 1.3,
scale_circle_size = 11,
save_output = FALSE,
plot_width = 11,
plot_height = 6,
plot_dpi = 600
)
# load the necessary libraries
library(sf)
library(readxl)
# import your geographical data for mapping
gmb_shpfile <- st_read(system.file("extdata", "geoBoundaries-GMB-ADM3_simplified.shp", package = "grcMPB"))
# excel sheet containing the location and their coordinates, longitude and latitude.
longitude_latitude <- read_excel(system.file("extdata", "LongLat_data.xlsx", package = "grcMPB"))
geo_data <-
mapping_data(
shapefile = gmb_shpfile,
long_lat_data = longitude_latitude,
location_col = "Location",
long_col = "long",
lat_col = "lat"
)
## You can create a single or range of years to filter by before generating the plots.
periods <-
list(
list(name = "2021", type = "year", start = "2021"),
list(name = "2017-19", type = "period", start = "2017", end = "2019")
)
sample_count_map(
df = grc_data,
map_data = geo_data,
time = NULL,
circle_num_size = 3.1,
label_size = 2.5,
label_repel = 1.3,
scale_circle_size = 11,
save_output = FALSE,
plot_width = 11,
plot_height = 6,
plot_dpi = 600
)
## You can create a single or range of years to filter by before generating the plots.
periods <-
list(
list(name = "2021", type = "year", start = "2021"),
list(name = "2017-19", type = "period", start = "2017", end = "2019")
)
sample_count_map(
df = grc_data2,
map_data = geo_data,
time = NULL,
circle_num_size = 3.1,
label_size = 2.5,
label_repel = 1.3,
scale_circle_size = 11,
save_output = FALSE,
plot_width = 11,
plot_height = 6,
plot_dpi = 600
)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(grcMPB)
grc_data2 <-
combine_grc_sheets(
input_folder = "C:/Users/bngwa/Documents/Brandon/GDA_Markdown/All_GRC_Reads_Gambia",
country = "Gambia",
save_output = TRUE,
output_dir = "C:/Users/bngwa/Videos"
)
grc_data <- pf_resistance_genotyper(df = grc_data)
grc_data <- pf_resistance_genotyper(df = grc_data2)
# load the necessary libraries
library(sf)
library(readxl)
# import your geographical data for mapping
gmb_shpfile <- st_read(system.file("extdata", "geoBoundaries-GMB-ADM3_simplified.shp", package = "grcMPB"))
# excel sheet containing the location and their coordinates, longitude and latitude.
longitude_latitude <- read_excel(system.file("extdata", "LongLat_data.xlsx", package = "grcMPB"))
geo_data <-
mapping_data(
shapefile = gmb_shpfile,
long_lat_data = longitude_latitude,
location_col = "Location",
long_col = "long",
lat_col = "lat"
)
# load the necessary libraries
library(sf)
library(readxl)
# import your geographical data for mapping
gmb_shpfile <- st_read(system.file("extdata", "geoBoundaries-GMB-ADM3_simplified.shp", package = "grcMPB"))
# excel sheet containing the location and their coordinates, longitude and latitude.
longitude_latitude <- read_excel(system.file("extdata", "LongLat_data.xlsx", package = "grcMPB"))
geo_data <-
mapping_data(
shapefile = gmb_shpfile,
long_lat_data = longitude_latitude,
location_col = "Location",
long_col = "long",
lat_col = "lat"
)
# load the necessary libraries
library(sf)
library(readxl)
# import your geographical data for mapping
gmb_shpfile <- st_read(system.file("extdata", "geoBoundaries-GMB-ADM3_simplified.shp", package = "grcMPB"))
# excel sheet containing the location and their coordinates, longitude and latitude.
longitude_latitude <- read_excel(system.file("extdata", "LongLat_data.xlsx", package = "grcMPB"))
geo_data <-
mapping_data(
shapefile = gmb_shpfile,
long_lat_data = longitude_latitude,
location_col = "Location",
long_col = "long",
lat_col = "lat"
)
library(grcMPB)
# load the necessary libraries
library(sf)
library(readxl)
# import your geographical data for mapping
gmb_shpfile <- st_read(system.file("extdata", "geoBoundaries-GMB-ADM3_simplified.shp", package = "grcMPB"))
# excel sheet containing the location and their coordinates, longitude and latitude.
longitude_latitude <- read_excel(system.file("extdata", "LongLat_data.xlsx", package = "grcMPB"))
geo_data <-
mapping_data(
shapefile = gmb_shpfile,
long_lat_data = longitude_latitude,
location_col = "Location",
long_col = "long",
lat_col = "lat"
)
devtools::load_all(".")
# load the necessary libraries
library(sf)
library(readxl)
# import your geographical data for mapping
gmb_shpfile <- st_read(system.file("extdata", "geoBoundaries-GMB-ADM3_simplified.shp", package = "grcMPB"))
# excel sheet containing the location and their coordinates, longitude and latitude.
longitude_latitude <- read_excel(system.file("extdata", "LongLat_data.xlsx", package = "grcMPB"))
geo_data <-
mapping_data(
shapefile = gmb_shpfile,
long_lat_data = longitude_latitude,
location_col = "Location",
long_col = "long",
lat_col = "lat"
)
barcode_data <-
filter_snp_x_samples(
df = grc_data,
m_threshold = 0.40
)
grc_data <-
combine_grc_sheets(
input_folder = "C:/Users/bngwa/Documents/Brandon/GDA_Markdown/All_GRC_Reads_Gambia",
country = "Gambia",
save_output = TRUE,
output_dir = "C:/Users/bngwa/Videos"
)
grc_data <- pf_resistance_genotyper(df = grc_data)
barcode_data <-
filter_snp_x_samples(
df = grc_data,
m_threshold = 0.40
)
ibs_data_list <-
generate_ibs_data(
df = grc_data,
snp_data = barcode_data,
drug_col = "Chloroquine"
)
ibs_data_list$IBS_Histogram
View(ibs_data_list)
View(ibs_data_list[["IBS_Melted_Matrix"]])
ibs_data_list[["IBS_Melted_Matrix"]]$DCS1
ibs_data_list[["IBS_Melted_Matrix"]]$DCS1 %>% unique()
ibs_data_list[["IBS_Melted_Matrix"]]$DCS1 %>% class()
ibs_data_list[["IBS_Melted_Matrix"]] %>% class()
ibs_table <-
ibs_data_dl(
melted_ibs_matrix = ibs_data_list$IBS_Melted_Matrix,
ibs_threshold = 0.75,
percentage_cutoff = 1,
map_data = geo_data,
label_size = 5,
label_repel = 1.23,
breaks = seq(0, 18, 3),
curve_degree = 0.3,
drug_status = "resistant",
save_output = FALSE,
)
ibs_table$Connectivity_Map %>% length()
