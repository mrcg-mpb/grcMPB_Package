mutate(
Wild = paste0(Wild, " (", round((Wild / Total) * 100, 1), "%)"),
Mutation = paste0(Mutation, " (", round((Mutation / Total) * 100, 1), "%)"),
Mixed = paste0(Mixed, " (", round((Mixed / Total) * 100, 1), "%)"),
Missing = paste0(Missing, " (", round((Missing / Total) * 100, 1), "%)")
)
### Plotting mutation frequencies (Result Table 1) ###
result_table1_melted <- result_table1 %>%
pivot_longer(cols = c(Wild, Mutation, Mixed, Missing), names_to = "Type", values_to = "Value") %>%
separate(Value, into = c("Count", "Percentage"), sep = " ", remove = FALSE) %>%
mutate(Count = as.numeric(gsub("[^0-9]", "", Count)),
Percentage = as.numeric(gsub("[^0-9.]", "", Percentage)),
Position_Number = as.numeric(gsub("[^0-9]", "", Mutations)),
Mutations = fct_reorder(Mutations, Position_Number))
# build the plot
mBar <- ggplot(result_table1_melted, aes(x = reorder(Mutations, -Count), y = Percentage, fill = Type)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = paste0(Percentage, "%")),
vjust = -0.4, position = position_dodge(width = 0.9), size = 3.3, fontface = "bold") +
scale_y_continuous(name = "Percentages (%)",
sec.axis = sec_axis(~ . * (max(result_table1_melted$Count) / max(result_table1_melted$Percentage)),
name = paste0("Counts (n=", result_table1_melted$Total[1], ")"))) +
labs(x = "Mutations", title = paste0("Mutation Frequency", " (",period_name,")") ) +
scale_fill_manual(values = c("Wild" = "#808000", "Mutation" = "#800000", "Mixed" = "#023020", "Missing" = "lightblue")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 15),
plot.title = element_text(hjust = 0.5, size = 15)) +
guides(fill = guide_legend(title = "Category"))
### Result Table 2: Mutation frequency by location ###
locations <- unique(df[["Location"]])
result_table2 <- data.frame(Location = character(), Total_Samples = integer(), stringsAsFactors = FALSE)
# Prepare columns for mutation counts at each position
for (pos in paste0(gene_info[[gene]]$ref, positions)) {
result_table2[[pos]] <- character()
}
# Vectorized approach to update result_table2
loc_hap_vecs_list <- lapply(locations, function(loc) {
loc_df <- df %>% filter(.data[["Location"]] == loc)
loc_haplotypes <- loc_df[[gene_col]]
list(loc = loc, total_samples = nrow(loc_df), loc_hap_vecs = lapply(loc_haplotypes, split_haplotype))
})
counts_list <- lapply(loc_hap_vecs_list, function(loc_data) {
sapply(seq_along(ref_haplotype), function(j) {
ref_char <- ref_haplotype[j]
hap_chars <- sapply(loc_data$loc_hap_vecs, function(hap_vec) ifelse(j <= length(hap_vec), hap_vec[j], "-"))
sum(hap_chars != ref_char & hap_chars != "-" & !grepl("\\[.*\\]", hap_chars))
})
})
mixed_counts_list <- lapply(loc_hap_vecs_list, function(loc_data) {
sapply(seq_along(ref_haplotype), function(j) {
hap_chars <- sapply(loc_data$loc_hap_vecs, function(hap_vec) ifelse(j <= length(hap_vec), hap_vec[j], "-"))
sum(grepl("\\[.*\\]", hap_chars))
})
})
result_table2 <- do.call(rbind, lapply(seq_along(locations), function(i) {
loc_data <- loc_hap_vecs_list[[i]]
counts <- counts_list[[i]]
mixed_counts <- mixed_counts_list[[i]]
row_data <- c(loc_data$loc, loc_data$total_samples)
mutation_counts <- if (include_mixed) counts + mixed_counts else counts
row_data <- c(row_data, sapply(mutation_counts, function(mutation_count) {
paste0(mutation_count, " (", round((mutation_count / loc_data$total_samples) * 100, 1), "%)")
}))
row_data
}))
# Fix column names
colnames(result_table2) <- c("Location", "Total", paste0(gene_info[[gene]]$ref, positions))
### Generate proportion maps for each mutation by location ###
Mutation_Table <- result_table2 %>%
mutate(across(-c(Location, Total), ~ as.numeric(gsub(".*\\((\\d+(?:\\.\\d+)?)%\\).*", "\\1", .)))) %>%
left_join(map_data$long_lat_data, by = "Location")
Mutation_Table_Sf <- st_as_sf(Mutation_Table, coords = c("long", "lat"), crs = sf::st_crs(map_data$shapefile))
# Initialize a list to store plots
MutationPlots <- list(M_BarChart = mBar, M_Maps = list())
for (p_column in paste0(gene_info[[gene]]$ref, positions)) {
# Build the ggplot map
p <-
ggplot() +
geom_sf(data = map_data$shapefile, fill = "white", color = "#023020", linewidth = 0.4) +
geom_sf(data = Mutation_Table_Sf, aes(size = 50, color = get(p_column))) +
ggrepel::geom_label_repel(data = Mutation_Table,
aes(label = Location , x = long, y = lat, fontface = "bold"),
color = "black",
size = label_size,
box.padding = unit(1.2, "lines"),
segment.color = '#132B43',
angle = 45,
max.overlaps = 20
) +
geom_text(data = Mutation_Table,
aes(label = get(p_column), x = long, y = lat),
size = circle_num_size,
color = "white",
fontface = "bold") +
theme_void() +
guides(size = "none") +
ggtitle(paste0(p_column, " (",period_name,")" )) +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.2, size = 15),
legend.key.width = unit(1, "cm"),
legend.title = element_text(size = 12, vjust = 0.75)) +
scale_color_gradient(high = "#132B43", low = "#56B1F7", name = "Percentages", limits = c(0, 100), labels = c("0%", "25%", "50%", "75%", "100%")) +
scale_size_continuous(range = c(1, scale_circle_size))
# Add plot to the list with the proportion column name
MutationPlots[["M_Maps"]][[p_column]] <- p
}
# Save your tables in a list
MutationFrequencyTables <- list(Table1 = result_table1, Tbale2 = result_table2 )
# Now save all plots if save_output is TRUE
if (save_output) {
save_path <- initialize_output_paths(dir1 = "Mutation_Plots" )
writexl::write_xlsx(result_table1, file.path(save_path, paste0("MutationFrequency_Table1", "_", period_name, ".xlsx") ))
writexl::write_xlsx(result_table2, file.path(save_path, paste0("MutationFrequency_Table2", "_", period_name, ".xlsx") ))
# save th barchart first
ggsave(
filename = paste0("Mutation_BarChart_", period_name, ".jpeg"),
plot = MutationPlots$M_BarChart$BarPlot,
path = save_path, dpi = 300, width = 11, height = 6)
# Loop through the MutationPlots and save each plot
for (plot_name in names(MutationPlots$M_Maps )) {
ggsave(filename =  paste0(plot_name, "_", period_name, ".jpeg"),
plot = MutationPlots$M_Maps[[plot_name]],
path = save_path,  dpi = 300, width = 11, height = 6)
}
}
return(list(
Plots = list(MutationPlots = MutationPlots),
Data = list(MutationFrequencyTables = MutationFrequencyTables)
))
}
mutation_frequency1(df = GRC_Data,
gene = "pfcrt",
gene_col = "PfCRT",
save_output = FALSE,
map_data = geo_data,
label_size = 2.5,
circle_num_size = 3.1,
scale_circle_size = 10,
include_mixed = FALSE)
mutation_frequency1 <- function(df, gene, gene_col, save_output = TRUE, period_name = "Full", map_data,
label_size = 2.5, circle_num_size = 3.1, scale_circle_size = 10, include_mixed = FALSE, ...) {
# Define the reference haplotypes and positions for each gene
gene_info <- list(
pfcrt = list(ref = c("C", "V", "M", "N", "K"),
positions = c("72", "73", "74", "75", "76")),
pfdhps = list(ref = c("S", "A", "K", "A", "A"),
positions = c("436", "437", "540", "581", "613")),
pfdhfr = list(ref = c("N", "C", "S", "I"),
positions = c("51", "59", "108", "164")),
pfmdr1 = list(ref = c("N", "Y", "D"),
positions = c("86", "184", "1246"))
)
# Get reference and positions for the chosen gene
ref_haplotype <- gene_info[[gene]]$ref
positions <- gene_info[[gene]]$positions
### Result Table 1: Mutation frequencies across the dataset ###
result_table1 <- data.frame(
Mutations = paste0(gene_info[[gene]]$ref, positions),
Wild = integer(length(positions)),
Mutation = integer(length(positions)),
Mixed = integer(length(positions)),
Missing = integer(length(positions)),
Total = integer(length(positions))
)
# Vectorized approach to update result_table1
haplotypes <- df[[gene_col]]
hap_vecs <- lapply(haplotypes, split_haplotype)
for (j in seq_along(ref_haplotype)) {
ref_char <- ref_haplotype[j]
hap_chars <- sapply(hap_vecs, function(hap_vec) ifelse(j <= length(hap_vec), hap_vec[j], "-"))
result_table1$Missing[j] <- sum(hap_chars == "-")
result_table1$Mixed[j] <- sum(grepl("\\[.*\\]", hap_chars))
result_table1$Wild[j] <- sum(hap_chars == ref_char)
result_table1$Mutation[j] <- sum(hap_chars != ref_char & hap_chars != "-" & !grepl("\\[.*\\]", hap_chars))
result_table1$Total[j] <- length(hap_chars)
}
# Calculate percentages and optionally include mixed counts
if (include_mixed) {
result_table1 <- result_table1 %>%
mutate(Mutation = Mutation + Mixed)
}
result_table1 <- result_table1 %>%
mutate(
Wild = paste0(Wild, " (", round((Wild / Total) * 100, 1), "%)"),
Mutation = paste0(Mutation, " (", round((Mutation / Total) * 100, 1), "%)"),
Mixed = paste0(Mixed, " (", round((Mixed / Total) * 100, 1), "%)"),
Missing = paste0(Missing, " (", round((Missing / Total) * 100, 1), "%)")
)
### Plotting mutation frequencies (Result Table 1) ###
result_table1_melted <- result_table1 %>%
pivot_longer(cols = c(Wild, Mutation, Mixed, Missing), names_to = "Type", values_to = "Value") %>%
separate(Value, into = c("Count", "Percentage"), sep = " ", remove = FALSE) %>%
mutate(Count = as.numeric(gsub("[^0-9]", "", Count)),
Percentage = as.numeric(gsub("[^0-9.]", "", Percentage)),
Position_Number = as.numeric(gsub("[^0-9]", "", Mutations)),
Mutations = fct_reorder(Mutations, Position_Number))
# build the plot
mBar <- ggplot(result_table1_melted, aes(x = reorder(Mutations, -Count), y = Percentage, fill = Type)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = paste0(Percentage, "%")),
vjust = -0.4, position = position_dodge(width = 0.9), size = 3.3, fontface = "bold") +
scale_y_continuous(name = "Percentages (%)",
sec.axis = sec_axis(~ . * (max(result_table1_melted$Count) / max(result_table1_melted$Percentage)),
name = paste0("Counts (n=", result_table1_melted$Total[1], ")"))) +
labs(x = "Mutations", title = paste0("Mutation Frequency", " (",period_name,")") ) +
scale_fill_manual(values = c("Wild" = "#808000", "Mutation" = "#800000", "Mixed" = "#023020", "Missing" = "lightblue")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 15),
plot.title = element_text(hjust = 0.5, size = 15)) +
guides(fill = guide_legend(title = "Category"))
### Result Table 2: Mutation frequency by location ###
locations <- unique(df[["Location"]])
result_table2 <- data.frame(Location = character(), Total_Samples = integer(), stringsAsFactors = FALSE)
# Prepare columns for mutation counts at each position
for (pos in paste0(gene_info[[gene]]$ref, positions)) {
result_table2[[pos]] <- character()
}
# Vectorized approach to update result_table2
for (loc in locations) {
loc_df <- df %>% filter(.data[["Location"]] == loc)
total_samples <- nrow(loc_df)
loc_haplotypes <- loc_df[[gene_col]]
loc_hap_vecs <- lapply(loc_haplotypes, split_haplotype)
counts <- sapply(seq_along(ref_haplotype), function(j) {
ref_char <- ref_haplotype[j]
hap_chars <- sapply(loc_hap_vecs, function(hap_vec) ifelse(j <= length(hap_vec), hap_vec[j], "-"))
sum(hap_chars != ref_char & hap_chars != "-" & !grepl("\\[.*\\]", hap_chars))
})
mixed_counts <- sapply(seq_along(ref_haplotype), function(j) {
hap_chars <- sapply(loc_hap_vecs, function(hap_vec) ifelse(j <= length(hap_vec), hap_vec[j], "-"))
sum(grepl("\\[.*\\]", hap_chars))
})
row_data <- c(loc, total_samples)
for (j in seq_along(positions)) {
mutation_count <- counts[j]
mixed_count <- mixed_counts[j]
if (include_mixed) {
mutation_count <- mutation_count + mixed_count
}
row_data <- c(row_data,
paste0(mutation_count, " (", round((mutation_count / total_samples) * 100, 1), "%)"))
}
result_table2 <- rbind(result_table2, row_data)
}
# Fix column names
colnames(result_table2) <- c("Location", "Total", paste0(gene_info[[gene]]$ref, positions))
### Generate proportion maps for each mutation by location ###
Mutation_Table <- result_table2 %>%
mutate(across(-c(Location, Total), ~ as.numeric(gsub(".*\\((\\d+(?:\\.\\d+)?)%\\).*", "\\1", .)))) %>%
left_join(map_data$long_lat_data, by = "Location")
Mutation_Table_Sf <- st_as_sf(Mutation_Table, coords = c("long", "lat"), crs = sf::st_crs(map_data$shapefile))
# Initialize a list to store plots
MutationPlots <- list(M_BarChart = mBar, M_Maps = list())
for (p_column in paste0(gene_info[[gene]]$ref, positions)) {
# Build the ggplot map
p <-
ggplot() +
geom_sf(data = map_data$shapefile, fill = "white", color = "#023020", linewidth = 0.4) +
geom_sf(data = Mutation_Table_Sf, aes(size = 50, color = get(p_column))) +
ggrepel::geom_label_repel(data = Mutation_Table,
aes(label = Location , x = long, y = lat, fontface = "bold"),
color = "black",
size = label_size,
box.padding = unit(1.2, "lines"),
segment.color = '#132B43',
angle = 45,
max.overlaps = 20
) +
geom_text(data = Mutation_Table,
aes(label = get(p_column), x = long, y = lat),
size = circle_num_size,
color = "white",
fontface = "bold") +
theme_void() +
guides(size = "none") +
ggtitle(paste0(p_column, " (",period_name,")" )) +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.2, size = 15),
legend.key.width = unit(1, "cm"),
legend.title = element_text(size = 12, vjust = 0.75)) +
scale_color_gradient(high = "#132B43", low = "#56B1F7", name = "Percentages", limits = c(0, 100), labels = c("0%", "25%", "50%", "75%", "100%")) +
scale_size_continuous(range = c(1, scale_circle_size))
# Add plot to the list with the proportion column name
MutationPlots[["M_Maps"]][[p_column]] <- p
}
# Save your tables in a list
MutationFrequencyTables <- list(Table1 = result_table1, Tbale2 = result_table2 )
# Now save all plots if save_output is TRUE
if (save_output) {
save_path <- initialize_output_paths(dir1 = "Mutation_Plots" )
writexl::write_xlsx(result_table1, file.path(save_path, paste0("MutationFrequency_Table1", "_", period_name, ".xlsx") ))
writexl::write_xlsx(result_table2, file.path(save_path, paste0("MutationFrequency_Table2", "_", period_name, ".xlsx") ))
# save th barchart first
ggsave(
filename = paste0("Mutation_BarChart_", period_name, ".jpeg"),
plot = MutationPlots$M_BarChart$BarPlot,
path = save_path, dpi = 300, width = 11, height = 6)
# Loop through the MutationPlots and save each plot
for (plot_name in names(MutationPlots$M_Maps )) {
ggsave(filename =  paste0(plot_name, "_", period_name, ".jpeg"),
plot = MutationPlots$M_Maps[[plot_name]],
path = save_path,  dpi = 300, width = 11, height = 6)
}
}
return(list(
Plots = list(MutationPlots = MutationPlots),
Data = list(MutationFrequencyTables = MutationFrequencyTables)
))
}
mutation_frequency1(df = GRC_Data,
gene = "pfcrt",
gene_col = "PfCRT",
save_output = FALSE,
map_data = geo_data,
label_size = 2.5,
circle_num_size = 3.1,
scale_circle_size = 10,
include_mixed = FALSE)
devtools::load_all(".")
mutation_frequency(df = GRC_Data,
gene = "pfcrt",
gene_col = "PfCRT",
save_output = FALSE,
time = NULL,
map_data = geo_data,
label_size = 2.5,
circle_num_size = 3.1,
scale_circle_size = 10,
include_mixed = FALSE)
devtools::load_all(".")
devtools::load_all(".")
mutation_frequency(df = GRC_Data,
gene = "pfcrt",
gene_col = "PfCRT",
save_output = TRUE,
time = NULL,
map_data = geo_data,
label_size = 2.5,
circle_num_size = 3.1,
scale_circle_size = 10,
include_mixed = FALSE)
lint("C:/Users/bngwa/Documents/Brandon/MPB_grcMalaria/R/Mutation_Frequency_Plots.R")
library(lintr)
lint("C:/Users/bngwa/Documents/Brandon/MPB_grcMalaria/R/Mutation_Frequency_Plots.R")
devtools::load_all(".")
lint("C:/Users/bngwa/Documents/Brandon/MPB_grcMalaria/R/Mutation_Frequency_Plots.R")
devtools::load_all(".")
lint("C:/Users/bngwa/Documents/Brandon/MPB_grcMalaria/R/Combine_GRC_Sheets.R")
library(lintr)
lint("C:/Users/bngwa/Documents/Brandon/MPB_grcMalaria/R/Combine_GRC_Sheets.R")
lint("C:/Users/bngwa/Documents/Brandon/MPB_grcMalaria/R/Combine_GRC_Sheets.R")
devtools::load_all(".")
library(grcMPB)
GRC_Data <-
combine_grc_sheets(input_folder="C:/Users/bngwa/Documents/Brandon/GDA_Markdown/All_GRC_Reads_Gambia",
country = "Gambia",
save_output = TRUE,
output_dir = "C:/Users/bngwa/Videos")
GRC_Data <-
gene_classifier(df = GRC_Data,
drug_column = "Chloroquine",
save_output = TRUE)
devtools::load_all(".")
GRC_Data <-
gene_classifier(df = GRC_Data,
drug_column = "Chloroquine",
save_output = TRUE)
## You can creat a single or range of years to filter buy before generating the plots
Periods <-
list(list(name="2021", type ="year", start="2021"),
list(name="2017-19",  type= "period", start="2017",  end="2019"))
sample_count_map(df = GRC_Data,
map_data = geo_data,
time = NULL,
breaks = c(10, 100, 200, 300),
label_size = 2.5,
scale_circle_size = 11,
save_output = TRUE)
# import your geographical data for maping
GMB <- st_read(system.file("extdata", "geoBoundaries-GMB-ADM3_simplified.shp", package = "grcMPB"))
LongLat <- read_excel(system.file("extdata", "LongLat_data.xlsx", package = "grcMPB"))
geo_data <-
mapping_data(shapefile = GMB ,
long_lat_data = LongLat,
location_col = "Location",
long_col = "long",
lat_col = "lat" )
## You can creat a single or range of years to filter buy before generating the plots
Periods <-
list(list(name="2021", type ="year", start="2021"),
list(name="2017-19",  type= "period", start="2017",  end="2019"))
sample_count_map(df = GRC_Data,
map_data = geo_data,
time = NULL,
breaks = c(10, 100, 200, 300),
label_size = 2.5,
scale_circle_size = 11,
save_output = TRUE)
devtools::load_all(".")
drug_distribution(df = GRC_Data,
drug_col = "Chloroquine",
save_output = TRUE,
time = NULL,
colors = c("resistant" = "#525CEB",
"mixed_resistant" = "#808000",
"sensitive" = "#800000"))
devtools::load_all(".")
drug_distribution(df = GRC_Data,
drug_col = "Chloroquine",
save_output = TRUE,
time = NULL,
colors = c("resistant" = "#525CEB",
"mixed_resistant" = "#808000",
"sensitive" = "#800000"))
devtools::load_all(".")
drug_distribution(df = GRC_Data,
drug_col = "Chloroquine",
save_output = TRUE,
time = NULL,
colors = c("resistant" = "#525CEB",
"mixed_resistant" = "#808000",
"sensitive" = "#800000"))
drug_distribution_pm(df = GRC_Data,
drug_col = "Chloroquine",
save_output = TRUE,
time = NULL,
map_data = geo_data,
label_size = 2.5,
circle_num_size = 3.1,
scale_circle_size = 10)
devtools::load_all(".")
devtools::load_all(".")
mutation_frequency(df = GRC_Data,
gene = "pfcrt",
gene_col = "PfCRT",
save_output = TRUE,
time = NULL,
map_data = geo_data,
label_size = 2.5,
circle_num_size = 3.1,
scale_circle_size = 10,
include_mixed = FALSE)
devtools::load_all(".")
haplotype_proportion(df = GRC_Data,
gene_col = "PfCRT",
drug_col = "Chloroquine",
save_output = TRUE,
time = NULL,
map_data = geo_data,
label_size = 2.5,
sacle_piechart_size = 0.035)
barcode_data <-
filter_snp_x_samples(df = GRC_Data,
m_threshold = 0.40)
head(barcode_data)
diversity_map(df = GRC_Data,
snp_data = barcode_data,
map_data = geo_data,
label_size = 2.5,
circle_num_size = 3.1,
scale_circle_size = 10,
time = NULL,
save_output = TRUE)
IBS_Data <-
generate_ibs_data(df = GRC_Data,
snp_data = barcode_data,
drug_col = "Chloroquine")
IBS_Data$IBS_Histogram
devtools::load_all(".")
IBS_Data <-
generate_ibs_data(df = GRC_Data,
snp_data = barcode_data,
drug_col = "Chloroquine")
IBS_Data$IBS_Histogram
ibs_data_sl(melted_ibs_matrix = IBS_Data$IBS_Melted_Matrix,
ibs_th = 0.75,
map_data = geo_data,
label_size = 2.5,
circle_num_size = 3.1,
scale_circle_size = 10,
save_output = TRUE)
ibs_data_dl(melted_ibs_matrix = IBS_Data$IBS_Melted_Matrix,
ibs_threshold = 0.75,
percentage_cutoff = 1,
map_data = geo_data,
label_size = 5,
breaks = seq(1,9,2),
curve_degree = 0.5,
save_output = TRUE)
devtools::load_all(".")
devtools::load_all(".")
ibs_heat_map(df = GRC_Data,
snp_data = barcode_data,
ibs_matrix = IBS_Data$IBS_matrix,
map_data = geo_data,
save_output = TRUE,
drug_col = "Chloroquine")
pcoa_plots(ibs_matrix = IBS_Data$IBS_matrix,
df = GRC_Data,
circle_size = 4,
save_output = TRUE,
drug_col = "Chloroquine")
nj_tree(ibs_matrix = IBS_Data$IBS_matrix,
df = GRC_Data,
tippoint_size = 4,
line_size = 0.6,
save_output = TRUE,
drug_col = "Chloroquine")
